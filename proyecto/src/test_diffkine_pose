#!/usr/bin/env python
#

from __future__ import print_function
import rospy
from sensor_msgs.msg import JointState

from markers import *
from functions import *


# Initialize the node
rospy.init_node("testKineControlPose")
print('starting motion ... ')
# Publisher: publish to the joint_states topic
pub = rospy.Publisher('joint_states', JointState, queue_size=1000)
# Markers for the current and desired positions
bmarker_current  = FrameMarker()
bmarker_desired = FrameMarker(0.5)

# Joint names
jnames = ['q1', 'q2', 'q3','q4', 'q5', 'q6','q7']

# Desired pose
ang = pi/3
Rd = np.array([[0,0,1],[0,1,0],[-1,0,0]])
qd = rot2quat(Rd)
# Find an xd that the robot can reach
xd = np.array([1.8, -0.2, 2, qd[0], qd[1], qd[2], qd[3]])
#xd  = np.array([0.5, 0.5, 0.6, np.cos(ang/2.0), 0, 0, np.sin(ang/2.0)])
# Initial configuration
q0 = np.array([0.0, 0.05, 0, 0, -1, 1, 0.0])

# Resulting initial pose (end effector with respect to the base link)
T = fkine(q0)
x0 = TF2xyzquat(T)

# Markers for the current and the desired pose
bmarker_current.setPose(x0)
bmarker_desired.setPose(xd)

# Instance of the JointState message
jstate = JointState()
# Values of the message
jstate.header.stamp = rospy.Time.now()
jstate.name = jnames
# Add the head joint value (with value 0) to the joints
jstate.position = q0

# Frequency (in Hz) and control period 
freq = 200
dt = 1.0/freq
rate = rospy.Rate(freq)

# Initial joint configuration
q = copy(q0)
x = copy(x0)
quat = x[3:7]
k=1
ka=0.05
delta=0.0001
I=np.eye(7)
# Initialize the derror vector (derivative of the error)
derror = np.zeros(7)
# Main loop
#for i in range(1):
while not rospy.is_shutdown():
    # Current time (needed for ROS)
    jstate.header.stamp = rospy.Time.now()
    # Kinematic control law for the pose (complete here)
    # --------------------------------------------------
    # Valores actuales de la posiicon y orientacion 
    T = fkine(q)
    x = TF2xyzquat(T)
    # Error de Posicion y Orientacion
    w_e = xd[3]*x[3] + np.transpose(xd[4:7]).dot(x[4:7])
    E_e = -xd[3]*x[4:7] + x[3]*xd[4:7] - np.cross(xd[4:7],x[4:7])
    e0 = np.hstack((w_e-1,E_e))
    e = np.hstack((x[0:3]-xd[0:3], e0))
    # Ley de Control
    e_dot=-k*e
    # Jacobiano de posicion y orientacion
    J = jacobian_pose(q,delta)
    # Velocidad articular
    #q_dot=np.linalg.pinv(J).dot(e_dot) #Pseudo Inervsa de Moore-Penrose
    q_dot=J.T.dot(np.linalg.inv(J.dot(J.T)+ka**2*I)).dot(e_dot) #Pseudoinversa-Amortiguada 
    # Nueva configuracion articular
    q = q + dt*q_dot

    if(q[0]>=2*pi):
        q[0]=2*pi
        print("q1 maximo alcanzado")
    if(q[0]<=-2*pi):
        q[0]=-2*pi
        print("q1 minimo alcanzado")
    if(q[1]>=0.5):
        q[1]=0.5
        print("q2 maximo alcanzado")
    if(q[1]<=0):
        q[1]=0
        print("q2 minimo alcanzado")
    if(q[2]>=2*pi):
        q[2]=2*pi
        print("q3 maximo alcanzado")
    if(q[2]<=-2*pi):
        q[2]=-2*pi
        print("q3 minimo alcanzado")
    if(q[3]>=2*pi):
        q[3]=2*pi
        print("q4 maximo alcanzado")
    if(q[3]<=-2*pi):
        q[3]=-2*pi
        print("q4 minimo alcanzado")
    if(q[4]>=2*pi):
        q[4]=2*pi
        print("q5 maximo alcanzado")
    if(q[4]<=-2*pi):
        q[4]=-2*pi
        print("q5 minimo alcanzado")
    if(q[5]>=2*pi):
        q[5]=2*pi
        print("q6 maximo alcanzado")
    if(q[5]<=-2*pi):
        q[5]=-2*pi
        print("q6 minimo alcanzado")
    if(q[6]>=2*pi):
        q[5]=2*pi
        print("q7 maximo alcanzado")
    if(q[6]<=-2*pi):
        q[5]=-2*pi
        print("q7 minimo alcanzado")
    
    # Current configuration trnaformation to current position
    T = fkine(q)
    x = TF2xyzquat(T)
    print("Pos y Ori:")
    print(x)
    # Publish the message
    jstate.position = q
    pub.publish(jstate)
    bmarker_desired.setPose(xd)
    bmarker_current.setPose(x)
    # Wait for the next iteration
    rate.sleep()
