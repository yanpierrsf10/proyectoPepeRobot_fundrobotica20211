#!/usr/bin/env python

import rospy
from sensor_msgs.msg import JointState
import numpy as np
pi=np.pi
from markers import *
from functions import *

rospy.init_node("testForwardKinematics")
pub = rospy.Publisher('joint_states', JointState, queue_size=1000)
bmarker = BallMarker(color['GREEN'])

# Joint names
jnames = ['q1', 'q2', 'q3','q4', 'q5', 'q6','q7']
# Joint Configuration
q = np.array([pi/2, 0.25, pi/4, 0, 0, pi/4, 0.0])
# End effector with respect to the base
T = fkine(q)
print( np.round(T,3))
bmarker.position(T)
# Object (message) whose type is JointState
jstate = JointState()
# Set values to the message
jstate.header.stamp = rospy.Time.now()
jstate.name = jnames
# Add the head joint value (with value 0) to the joints
jstate.position = q

# Loop rate (in Hz)
rate = rospy.Rate(100)
# Continuous execution loop
while not rospy.is_shutdown():
    # Current time (needed for ROS)
    jstate.header.stamp = rospy.Time.now()
    # Publish the message
    pub.publish(jstate)
    bmarker.publish()
    # Wait for the next iteration
    rate.sleep()
